
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_gallery\4comimprove\plot_importantsearch.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_gallery_4comimprove_plot_importantsearch.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_gallery_4comimprove_plot_importantsearch.py:


p>>N (Important Search)
-------------------
Suppose that there are only a few variables are important (i.e. too many noise variables), it may be a vise choice to focus on some important variables in splicing process. This can save a lot of time, especially under a large :math:`p`.

In abess package, an argument called `important_search` is used for it, which means the size of inactive set for each splicing process. By default, this argument is set as 0, and the total inactive variables would be contained in the inactive set. But if an positive integer is given, the splicing process would focus on active set and the most important `important_search` inactive variables.
 
However, after convergence on this subset, we check if the chosen variables are still the most important ones by recomputing on the full set with the new active set. If not, we update the subset and splicing again. On our testing, it would not iterate many time to reach a stable subset. After that, the active set on the stable subset would be treated as that on the full set.

Here we take `LogisticRegression` for an example. 

.. GENERATED FROM PYTHON SOURCE LINES 12-29

.. code-block:: default



    from abess.linear import LogisticRegression
    from abess.datasets import make_glm_data
    from time import time
    import numpy as np

    data = make_glm_data(n = 500, p = 10000, k = 10, family = "binomial")

    t1 = time()
    model = LogisticRegression()
    model.fit(data.x, data.y)
    t2 = time()

    print("non_zero :\n", np.nonzero(model.coef_)[0])
    print("time : ", t2 - t1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    non_zero :
     [1862 2349 3059 3342 6396 6465 6645 6660 9044 9391]
    time :  0.5695071220397949




.. GENERATED FROM PYTHON SOURCE LINES 30-31

However, if we only focus on 500 important inactive variables when searching:

.. GENERATED FROM PYTHON SOURCE LINES 31-41

.. code-block:: default



    t1 = time()
    model2 = LogisticRegression(important_search = 500)
    model2.fit(data.x, data.y)
    t2 = time()

    print("non_zero :\n", np.nonzero(model2.coef_)[0])
    print("time : ", t2 - t1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    non_zero :
     [1862 2349 3059 3342 6396 6465 6645 6660 9044 9391]
    time :  0.8576765060424805




.. GENERATED FROM PYTHON SOURCE LINES 42-49

It takes much less time to reach the same result. We recommend use this method for large :math:`p` situation, but in small one, it may not be faster than the primary fitting.

Here we compare the AUC and runtime for `LogisticRegression` under different `important_search` and the test code can be found [here](https://github.com/abess-team/abess/blob/master/docs/simulation/Python/impsearch.py).


.. image:: ./images/impsearch.png.png
At a low level of `important_search`, however, the performance (AUC) has been very good. In this situation, a lower `important_search` can save lots of time and space.

.. GENERATED FROM PYTHON SOURCE LINES 51-55

R tutorial
-------------

For R tutorial, please view [https://abess-team.github.io/abess/articles/v09-fasterSetting.html](https://abess-team.github.io/abess/articles/v09-fasterSetting.html).


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.715 seconds)


.. _sphx_glr_download_auto_gallery_4comimprove_plot_importantsearch.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_importantsearch.py <plot_importantsearch.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_importantsearch.ipynb <plot_importantsearch.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
