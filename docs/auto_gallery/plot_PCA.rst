
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_gallery\plot_PCA.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_gallery_plot_PCA.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_gallery_plot_PCA.py:


Principal Component Analysis
==================================
This notebook introduces what is adaptive best subset selection principal component analysis (SparsePCA) and uses a real data example to show how to use it. 

.. GENERATED FROM PYTHON SOURCE LINES 8-48

PCA
---------------
Principal component analysis (PCA) is an important method in the field of data science, which can reduce the dimension of data and simplify our model. It actually solve an optimization problem like:

..math::
    \max_{v} v^{\top}\Sigma v,\qquad s.t.\quad v^Tv=1.


where :math:`\Sigma = X^TX / (n-1)` and :math:`X` is the **centered** sample matrix. We also denote that :math:`X` is a :math:`n\times p` matrix, where each row is an observation and each column is a variables.

Then, before further analysis, we can project :math:`X` to :math:`v` (thus dimensional reduction), without losing too much information.

However, consider that: 

- The PC is a linear combination of all primary variables (:math:`Xv`), but sometimes we may tend to use less variables for clearer interpretation (and less computational complexity);
- It has been proved that if :math:`p/n` does not converge to :math:`0`, the classical PCA is not consistent, but this would happen in some high-dimensional data analysis.

> For example, in gene analysis, the dataset may contain plenty of genes (variables) and we would like to find a subset of them, which can explain most information. Compared with using all genes, this small subset may perform better on interpretation, without loss much information. Then we can focus on these variables in the further analysis.

When we trapped by these problems, a classical PCA may not be a best choice, since it use all variables. One of the alternatives is `SparsePCA`, which is able to seek for principal component with a sparsity limitation:

..math::
    \max_{v} v^{\top}\Sigma v,\qquad s.t.\quad v^Tv=1,\ ||v||_0\leq s.


where :math:`s` is a non-negative integer, which indicates how many primary variables are used in principal component. With `SparsePCA`, we can search for the best subset of variables to form principal component and it retains consistency even under :math:`p>>n`. And we make two remarks: 

> Clearly, if :math:`s` is equal or larger than the number of primary variables, this sparsity limitation is actually useless, so the problem is equivalent to a classical PCA.

> With less variables, the PC must have lower explained variance. However, this decrease is slight if we choose a good :math:`s` and at this price, we can interpret the PC much better. It is worthy. 

In the next section, we will show how to form `SparsePCA`.

Real Data Example (Communities and Crime Dataset)
-----------------------------------------------------------

Here we will use real data analysis to show how to form `SparsePCA`. The data we use is from [UCI:
Communities and Crime Data Set](https://archive.ics.uci.edu/ml/datasets/Communities+and+Crime) and we pick up its 99 predictive variables as our samples.

Firstly, we read the data and pick up those variables we interested.

.. GENERATED FROM PYTHON SOURCE LINES 48-62

.. code-block:: default




    import numpy as np
    from abess.decomposition import SparsePCA

    X = np.genfromtxt('communities.data', delimiter = ',') 
    X = X[:, 5:127]                         # numeric predictiors
    X = X[:, ~np.isnan(X).any(axis = 0)]    # drop variables with nan

    n, p = X.shape
    print(n)
    print(p)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    1994
    99




.. GENERATED FROM PYTHON SOURCE LINES 63-70

Model fitting
^^^^^^^^^^^^^^^^^^^^
To build an SparsePCA model, we need to give the target sparisty to its `support_size` argument. Our program supports adaptively finding a best sparisty in a given range. 

Fixed sparsity
 """"""""""""""""""""""""""""""""
If we only focus on one fixed sparsity, you can simply give a single integer to fit on this situation. And then the fitted sparse principal component is stored in `SparsePCA.coef_`:

.. GENERATED FROM PYTHON SOURCE LINES 70-75

.. code-block:: default




    model = SparsePCA(support_size = 20)








.. GENERATED FROM PYTHON SOURCE LINES 76-77

Give either :math:`X` or :math:`\Sigma` to `model.fit()` and the fitting process will start. The argument `is_normal = False` here means that the program will not normalize :math:`X`. Note that if both :math:`X` and :math:`Sigma` are given, the program prefer to use :math:`X`.

.. GENERATED FROM PYTHON SOURCE LINES 77-83

.. code-block:: default




    model.fit(X = X, is_normal = False)
    # model.fit(Sigma = np.cov(X.T))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    SparsePCA(always_select=[], support_size=20)



.. GENERATED FROM PYTHON SOURCE LINES 84-85

After fitting, `model.coef_` returns the sparse principal component and its non-zero positions correspond to variables used. 

.. GENERATED FROM PYTHON SOURCE LINES 85-92

.. code-block:: default



    temp = np.nonzero(model.coef_)[0]
    print('sparsity: ', temp.size)
    print('non-zero position: \n', temp)
    print(model.coef_.T)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    sparsity:  99
    non-zero position: 
     [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
     24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
     48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71
     72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95
     96 97 98]
    [[5.38406264e-04 2.39001766e-03 6.43388533e-04 4.37032431e-02
      2.27490338e-02 6.98906294e-02 2.42411140e-04 8.92638112e-04
      4.19200912e-04 7.21427732e-04 5.78654815e-04 2.60191153e-03
      3.21227002e-04 4.15994818e-06 7.73014369e-05 2.88300138e-03
      4.84427611e-04 1.94946000e-02 1.37597979e-03 5.46124355e-04
      5.90842314e-04 1.32274597e-04 1.41405795e-05 5.74163918e-08
      2.38994975e-04 6.03321625e-04 6.85493005e-04 3.26683594e-03
      2.18893167e-02 4.26827359e-03 5.91846002e-04 4.20667511e-03
      3.02168785e-04 2.31777409e-05 4.67902930e-04 6.99772391e-04
      9.13639425e-04 1.74222722e-04 2.59610154e-03 9.19512052e-04
      5.27726749e-04 4.03223300e-03 1.79918988e-03 2.70295390e-03
      1.57377598e-03 1.33335038e-03 9.59743650e-04 2.48022921e-03
      4.32118547e-04 1.78660358e-02 1.09494597e-03 1.83989074e-03
      2.80312003e-03 3.34855771e-03 4.24754514e-03 7.96790216e-02
      8.39997865e-02 8.55288442e-02 8.60885251e-02 7.72671819e-02
      7.73831950e-02 4.32364850e-02 3.61784054e-02 2.68807633e-03
      1.64508389e-03 2.39094183e-02 1.85712922e-02 6.68121630e-02
      3.69755571e-03 2.08330776e-02 3.41099877e-04 6.72612579e-06
      3.79115245e-03 9.15899646e-04 1.07881671e-03 4.45990337e-05
      1.40454645e-03 3.35471640e-03 1.51663365e-03 1.74746135e-03
      1.68427433e-03 9.44117296e-04 7.79568929e-04 1.16923594e-03
      5.17914548e-04 2.44378788e-03 3.60280705e-03 4.08771440e-05
      2.82656589e-04 3.57004161e-04 7.64224185e-02 3.02502856e-03
      7.29047614e-04 1.18057148e-05 2.30305959e-04 5.59765034e-08
      2.84973268e-02 2.67047793e-03 1.66567843e-03]]




.. GENERATED FROM PYTHON SOURCE LINES 93-98

Adaptive sparsity
""""""""""""""""""""""""""""""""
What's more, **abess** also support a range of sparsity and adaptively choose the best-explain one. However, usually a higher sparsity level would lead to better explaination.

Now, you need to build an :math:`s_{max} \times 1` binomial matrix, where :math:`s_{max}` indicates the max target sparsity and each row indicates one sparsity level (i.e. start from :math:`1`, until :math:`s_{max}`). For each position with :math:`1`, **abess** would try to fit the model under that sparsity and finally give the best one.

.. GENERATED FROM PYTHON SOURCE LINES 98-111

.. code-block:: default



    # fit sparsity from 1 to 20
    support_size = np.ones((20, 1))
    # build model
    model = SparsePCA(support_size = support_size)
    model.fit(X, is_normal = False)  
    # results
    temp = np.nonzero(model.coef_)[0]
    print('chosen sparsity: ', temp.size)
    print('non-zero position: \n', temp)
    print(model.coef_.T)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    chosen sparsity:  17
    non-zero position: 
     [11 12 17 19 20 21 27 30 44 76 78 79 80 81 82 83 84]
    [[ 0.          0.          0.          0.          0.          0.
       0.          0.          0.          0.          0.         -0.30042772
      -0.2477331   0.          0.          0.          0.          0.1851824
       0.         -0.23604721 -0.21878002 -0.20389634  0.          0.
       0.          0.          0.          0.22405984  0.          0.
      -0.18631374  0.          0.          0.          0.          0.
       0.          0.          0.          0.          0.          0.
       0.          0.         -0.19094152  0.          0.          0.
       0.          0.          0.          0.          0.          0.
       0.          0.          0.          0.          0.          0.
       0.          0.          0.          0.          0.          0.
       0.          0.          0.          0.          0.          0.
       0.          0.          0.          0.          0.24692926  0.
      -0.2574062  -0.26364792 -0.26445765 -0.25461785 -0.25113922 -0.29769217
      -0.25366539  0.          0.          0.          0.          0.
       0.          0.          0.          0.          0.          0.
       0.          0.          0.        ]]




.. GENERATED FROM PYTHON SOURCE LINES 112-115

*Because of warm-start, the results here may not be the same as fitted sparsity.*

Then, the explained variance can be computed by:

.. GENERATED FROM PYTHON SOURCE LINES 115-124

.. code-block:: default




    Xc = X - X.mean(axis = 0)
    Xv = Xc @ model.coef_
    explained = Xv.T @ Xv                   # explained variance (information)
    total = sum(np.diag(Xc.T @ Xc))         # total variance (information)
    print( 'explained ratio: ', explained / total )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    explained ratio:  [[0.15414104]]




.. GENERATED FROM PYTHON SOURCE LINES 125-130

More on the results
^^^^^^^^^^^^^^^^^^^^^^^^^^
We can give different target sparsity (change `s_begin` and `s_end`) to get different sparse loading. Interestingly, we can seek for a smaller sparsity which can explain most of the variance.

In this example, if we try sparsities from :math:`0` to :math:`p`, and calculate the ratio of explained variance:

.. GENERATED FROM PYTHON SOURCE LINES 130-151

.. code-block:: default



    num = 30
    i = 0
    sparsity = np.linspace(1, p - 1, num, dtype='int')
    explain = np.zeros(num)
    Xc = X - X.mean(axis = 0)
    for s in sparsity:
        model = SparsePCA(
            support_size = np.ones((s, 1)),
            exchange_num = int(s),  
            max_iter = 50
        )
        model.fit(X, is_normal = False)
        Xv = Xc @ model.coef_
        explain[i] = Xv.T @ Xv
        i += 1

    print('80%+ : ', sparsity[explain > 0.8 * explain[num-1]])
    print('90%+ : ', sparsity[explain > 0.9 * explain[num-1]])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    80%+ :  [ 4  7 11 14 17 21 24 27 31 34 37 41 44 47 51 54 57 61 64 67 71 74 77 81
     84 87 91 94]
    90%+ :  [ 4  7 11 14 17 21 24 27 31 34 37 41 44 47 51 54 57 61 64 67 71 74 77 81
     84 87 91 94]




.. GENERATED FROM PYTHON SOURCE LINES 152-153

If we denote the explained ratio from all 99 variables as 100%, the curve indicates that at least 31 variables can reach 80% (blue dashed line) and 41 variables can reach 90% (red dashed line).

.. GENERATED FROM PYTHON SOURCE LINES 153-177

.. code-block:: default



    import matplotlib.pyplot as plt
    plt.plot(sparsity, explain)
    plt.xlabel('Sparsity')
    plt.ylabel('Explained variance')

    ind = np.where(explain > 0.8 * explain[num-1])[0][0]
    plt.plot([0, sparsity[ind]], [explain[ind], explain[ind]], 'b--')
    plt.plot([sparsity[ind], sparsity[ind]], [0, explain[ind]], 'b--')
    plt.text(sparsity[ind], 0, str(sparsity[ind]))
    plt.text(0, explain[ind], '80%')

    ind = np.where(explain > 0.9 * explain[num-1])[0][0]
    plt.plot([0, sparsity[ind]], [explain[ind], explain[ind]], 'r--')
    plt.plot([sparsity[ind], sparsity[ind]], [0, explain[ind]], 'r--')
    plt.text(sparsity[ind], 0, str(sparsity[ind]))
    plt.text(0, explain[ind], '90%')

    plt.plot([0, p], [explain[num-1], explain[num-1]], color='gray', linestyle='--')
    plt.text(0, explain[num-1],'100%')

    plt.show()




.. image-sg:: /auto_gallery/images/sphx_glr_plot_PCA_001.png
   :alt: plot PCA
   :srcset: /auto_gallery/images/sphx_glr_plot_PCA_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 178-179

This result shows that using less than half of all 99 variables can be close to perfect. For example, if we choose sparsity 31, the used variables are:

.. GENERATED FROM PYTHON SOURCE LINES 179-186

.. code-block:: default



    model = SparsePCA(support_size = 31)
    model.fit(X, is_normal = False)
    temp = np.nonzero(model.coef_)[0]
    print('non-zero position: \n', temp)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    non-zero position: 
     []




.. GENERATED FROM PYTHON SOURCE LINES 187-214

Extension: Group PCA
----------------------------
Group PCA
^^^^^^^^^^^^^^^^^^^
Furthermore, in some situation, some variables may need to consider together, that is, they should be "used" or "unused" for PC at the same time, which we call "group information". The optimization problem becomes:

:math:``
    \max_{v} v^{\top}\Sigma v,\qquad s.t.\quad v^Tv=1,\ \sum_{g=1}^G I(||v_g||\neq 0)\leq s.
:math:``

where we suppose there are :math:`G` groups, and the :math:`g`-th one correspond to :math:`v_g`, :math:`v = [v_1^{\top},v_2^{\top},\cdots,v_G^{\top}]^{\top}`. Then we are interested to find :math:`s` (or less) important groups.

> Group problem is extraordinary important in real data analysis. Still take gene analysis as an example, several sites would be related to one charcter, and it is meaningless to consider each of them alone. 

`SparsePCA` can also deal with group information. Here we make sure that variables in the same group address close to each other (if not, the data should be sorted first).

Simulated Data Example
^^^^^^^^^^^^^^^^^^^^^^^^^
Suppose that the data above have group information like:

- Group 0: {the 1st, 2nd, ..., 6th variable};
- Group 1: {the 7th, 8th, ..., 12th variable};
- ...
- Group 15: {the 91st, 92nd, ..., 96th variable};
- Group 16: {the 97th, 98th, 99th variables}.

Denote different groups as different number:  

.. GENERATED FROM PYTHON SOURCE LINES 214-222

.. code-block:: default



    g_info = np.arange(17) 
    g_info = g_info.repeat(6)
    g_info = g_info[0:99]

    print(g_info)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ 0  0  0  0  0  0  1  1  1  1  1  1  2  2  2  2  2  2  3  3  3  3  3  3
      4  4  4  4  4  4  5  5  5  5  5  5  6  6  6  6  6  6  7  7  7  7  7  7
      8  8  8  8  8  8  9  9  9  9  9  9 10 10 10 10 10 10 11 11 11 11 11 11
     12 12 12 12 12 12 13 13 13 13 13 13 14 14 14 14 14 14 15 15 15 15 15 15
     16 16 16]




.. GENERATED FROM PYTHON SOURCE LINES 223-224

And fit a group sparse PCA model with additional argument `group=g_info`:

.. GENERATED FROM PYTHON SOURCE LINES 224-229

.. code-block:: default



    model = SparsePCA(support_size = np.ones((6, 1)))
    model.fit(X, group = g_info, is_normal = False) 





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    SparsePCA(always_select=[],
              support_size=array([[1.],
           [1.],
           [1.],
           [1.],
           [1.],
           [1.]]))



.. GENERATED FROM PYTHON SOURCE LINES 230-231

The result comes to:

.. GENERATED FROM PYTHON SOURCE LINES 231-241

.. code-block:: default



    print(model.coef_.T)

    temp = np.nonzero(model.coef_)[0]
    temp = np.unique(g_info[temp])

    print('non-zero group: \n', temp)
    print('chosen sparsity: ', temp.size)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[ 0.          0.          0.          0.          0.          0.
       0.          0.          0.          0.          0.          0.
       0.          0.          0.          0.          0.          0.
       0.          0.          0.          0.          0.          0.
       0.          0.          0.          0.          0.          0.
       0.          0.          0.          0.          0.          0.
       0.          0.          0.          0.          0.          0.
       0.          0.          0.          0.          0.          0.
       0.          0.          0.          0.          0.          0.
      -0.196633   -0.44897571 -0.45494348 -0.45631741 -0.45174114  0.37481605
       0.          0.          0.          0.          0.          0.
       0.          0.          0.          0.          0.          0.
       0.          0.          0.          0.          0.          0.
       0.          0.          0.          0.          0.          0.
       0.          0.          0.          0.          0.          0.
       0.          0.          0.          0.          0.          0.
       0.          0.          0.        ]]
    non-zero group: 
     [9]
    chosen sparsity:  1




.. GENERATED FROM PYTHON SOURCE LINES 242-259

Hence we can focus on variables in Group 0, 8, 9, 10, 11, 15.
##############################################################################
 Extension: Multiple principal components
 --------------------------------------------
  Multiple principal components
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 In some cases, we may seek for more than one principal components under sparsity. Actually, we can iteratively solve the largest principal component and then mapping the covariance matrix to its orthogonal space:

 :math:``
 \Sigma' = (1-vv^{\top})\Sigma(1-vv^{\top})
 :math:``

 where :math:`\Sigma` is the currect covariance matrix and :math:`v` is its (sparse) principal component. We map it into :math:`\Sigma'`, which indicates the orthogonal space of :math:`v`, and then solve the sparse principal component again. 

 By this iteration process, we can acquire multiple principal components and they are sorted from the largest to the smallest.
 In our program, there is an additional argument `number`, which indicates the number of principal components we need, defaulted by 1.
 Now the `support_size` is shaped in :math:`s_{max}\times \text{number}` and each column indicates one principal component.

.. GENERATED FROM PYTHON SOURCE LINES 259-266

.. code-block:: default




    model = SparsePCA(support_size = np.ones((31, 3)))
    model.fit(X, is_normal = False, number = 3)
    model.coef_.shape





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (99, 3)



.. GENERATED FROM PYTHON SOURCE LINES 267-268

Here, each column of the `model.coef_` is a sparse PC (from the largest to the smallest), for example the second one is that:

.. GENERATED FROM PYTHON SOURCE LINES 268-273

.. code-block:: default




    model.coef_[:,1]





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])



.. GENERATED FROM PYTHON SOURCE LINES 274-275

If we want to compute the explained variance of them, it is also quite easy: 

.. GENERATED FROM PYTHON SOURCE LINES 275-282

.. code-block:: default




    Xv = Xc.dot(model.coef_)
    explained = np.sum(np.diag(Xv.T.dot(Xv)))
    print( 'explained ratio: ', explained / total )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    explained ratio:  0.03638017647742452




.. GENERATED FROM PYTHON SOURCE LINES 283-286

R tutorial
----------------------
For R tutorial, please view [https://abess-team.github.io/abess/articles/v08-sPCA.html](https://abess-team.github.io/abess/articles/v08-sPCA.html).


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  17.361 seconds)


.. _sphx_glr_download_auto_gallery_plot_PCA.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_PCA.py <plot_PCA.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_PCA.ipynb <plot_PCA.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
